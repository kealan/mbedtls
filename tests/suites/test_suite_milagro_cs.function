/* BEGIN_HEADER */
#include "mbedtls/milagro.h"
/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:MBEDTLS_MILAGRO_CS_C:MBEDTLS_MILAGRO_CS_TIME_PERMITS
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void milagro_cs_do( int date, char *client_identity, char *time_permit,
                               char *client_secret, char *server_secret )
{
    /*
     * Initializate parameters
     */
    mbedtls_milagro_cs_context milagro_cs_client;
    mbedtls_milagro_cs_context milagro_cs_server;
    mbedtls_milagro_cs_init(&milagro_cs_client);
    mbedtls_milagro_cs_init(&milagro_cs_server);
    
    /*
     * Set external inputs
     */
    size_t len1, len2, len3;
    unsigned char *cs_client_key = unhexify_alloc(client_secret,&len1);
    unsigned char *cs_client_tp = unhexify_alloc(time_permit,&len2);
    unsigned char *cs_server_key = unhexify_alloc(server_secret,&len3);    

    mbedtls_milagro_cs_set_secret(&milagro_cs_client, (char*)cs_client_key, 2*PFS+1);
    mbedtls_milagro_cs_set_secret(&milagro_cs_server, (char*)cs_server_key, 4*PFS);
    mbedtls_milagro_cs_set_client_identity (&milagro_cs_client, client_identity);
    mbedtls_milagro_cs_set_timepermit(&milagro_cs_client, (char*)cs_client_tp, 2*PFS+1);
    
    /*
     * Setup random generator (fake entropy)
     */
    
    char seed[32] = {0};
    octet SEED = {0,sizeof(seed),seed};
    SEED.len=32;
    for (int i=0;i<32;i++) SEED.val[i]=i+1;
    mbedtls_milagro_cs_create_csprng(&milagro_cs_client.RNG,&SEED);
    mbedtls_milagro_cs_create_csprng(&milagro_cs_server.RNG,&SEED);
    milagro_cs_client.date = date;
    milagro_cs_server.date = date;
    /*
     * Allocate memory and generation parameters from client's side
     */
    TEST_ASSERT( mbedtls_milagro_cs_alloc_memory(MBEDTLS_MILAGRO_IS_CLIENT, &milagro_cs_client) == 0 );
    TEST_ASSERT( mbedtls_milagro_cs_alloc_memory(MBEDTLS_MILAGRO_IS_SERVER, &milagro_cs_server) == 0 );
    /*
     * Exchange parameters
     */
    milagro_cs_server.hash_client_id.val = mbedtls_milagro_calloc(milagro_cs_client.hash_client_id.len);
    milagro_cs_server.U.val = mbedtls_milagro_calloc(milagro_cs_client.U.len);
    milagro_cs_server.UT.val = mbedtls_milagro_calloc(milagro_cs_client.UT.len);
    milagro_cs_server.V.val = mbedtls_milagro_calloc(milagro_cs_client.V.len);
    memcpy(milagro_cs_server.hash_client_id.val,milagro_cs_client.hash_client_id.val,milagro_cs_client.hash_client_id.len);
    memcpy(milagro_cs_server.UT.val,milagro_cs_client.UT.val,milagro_cs_client.UT.len);
    memcpy(milagro_cs_server.U.val,milagro_cs_client.U.val,milagro_cs_client.U.len);
    memcpy(milagro_cs_server.V.val,milagro_cs_client.V.val,milagro_cs_client.V.len);
    milagro_cs_server.hash_client_id.len = milagro_cs_client.hash_client_id.len;
    milagro_cs_server.U.len = milagro_cs_client.U.len;
    milagro_cs_server.UT.len = milagro_cs_client.UT.len;
    milagro_cs_server.V.len = milagro_cs_client.V.len;
    milagro_cs_server.timevalue = milagro_cs_server.timevalue;
    
    /*
     * Client's authentication at server'side
     */
    TEST_ASSERT( mbedtls_milagro_cs_authenticate_client(&milagro_cs_server) == 0 );
    
    /*
     * Compute public parameters
     */
    
    TEST_ASSERT( mbedtls_milagro_cs_get_g1_multiple(&milagro_cs_client.RNG,1,&milagro_cs_client.param_rand,
                                           &milagro_cs_client.hash_client_id,&milagro_cs_client.R) == 0 );
#if defined(MBEDTLS_MILAGRO_CS_TIME_PERMITS)
    TEST_ASSERT( mbedtls_milagro_cs_get_g1_multiple(&milagro_cs_server.RNG,0,&milagro_cs_server.param_rand,
                                           &milagro_cs_server.HTID,&milagro_cs_server.W) == 0 );
#else
    TEST_ASSERT( mbedtls_milagro_cs_get_g1_multiple(&milagro_cs_server.RNG,0,&milagro_cs_server.param_rand,
                                           &milagro_cs_server.HID,&milagro_cs_server.W) == 0 );
#endif
    
    /*
     * Exchange public parameters
     */
    milagro_cs_client.W.val = mbedtls_milagro_calloc(milagro_cs_server.W.len);
    milagro_cs_client.W.len = milagro_cs_server.W.len;
    memcpy(milagro_cs_client.W.val, milagro_cs_server.W.val, milagro_cs_server.W.len);
    milagro_cs_server.R.val = mbedtls_milagro_calloc(milagro_cs_client.R.len);
    milagro_cs_server.R.len = milagro_cs_client.R.len;
    memcpy(milagro_cs_server.R.val, milagro_cs_client.R.val, milagro_cs_client.R.len);
    /*
     * Compute shared secret
     */
    TEST_ASSERT( mbedtls_milagro_cs_share_secret_srv(&milagro_cs_server) == 0 );
    TEST_ASSERT( mbedtls_milagro_cs_share_secret_cli(&milagro_cs_client) == 0 );
    
    int value_eq_key = 0;
    for (int i = 0; i<milagro_cs_client.Key.len; i++)
    {
        if (milagro_cs_client.Key.val[i] != milagro_cs_server.Key.val[i])
        {
            value_eq_key = -1; break;
        }
    }

    TEST_ASSERT( value_eq_key == 0 );
    
exit:
    mbedtls_free(cs_client_key); mbedtls_free(cs_server_key); mbedtls_free(cs_client_tp);
    mbedtls_milagro_cs_free( &milagro_cs_client );
    mbedtls_milagro_cs_free( &milagro_cs_server );
}
/* END_CASE */



/* BEGIN_CASE */
void milagro_cs_fail( int date, char *client_identity, char *time_permit,
                               char *client_secret, char *server_secret )
{
    /*
     * Initializate parameters
     */
    mbedtls_milagro_cs_context milagro_cs_client;
    mbedtls_milagro_cs_context milagro_cs_server;
    mbedtls_milagro_cs_init(&milagro_cs_client);
    mbedtls_milagro_cs_init(&milagro_cs_server);
    
    /*
     * Set external inputs
     */
    size_t len1, len2, len3;
    unsigned char *cs_client_key = unhexify_alloc(client_secret,&len1);
    unsigned char *cs_client_tp = unhexify_alloc(time_permit,&len2);
    unsigned char *cs_server_key = unhexify_alloc(server_secret,&len3);    

    mbedtls_milagro_cs_set_secret(&milagro_cs_client, (char*)cs_client_key, 2*PFS+1);
    mbedtls_milagro_cs_set_secret(&milagro_cs_server, (char*)cs_server_key, 4*PFS);
    mbedtls_milagro_cs_set_client_identity (&milagro_cs_client, client_identity);
    mbedtls_milagro_cs_set_timepermit(&milagro_cs_client, (char*)cs_client_tp, 2*PFS+1);
    
    /*
     * Setup random generator (fake entropy)
     */
    
    char seed[32] = {0};
    octet SEED = {0,sizeof(seed),seed};
    SEED.len=32;
    for (int i=0;i<32;i++) SEED.val[i]=i+1;
    mbedtls_milagro_cs_create_csprng(&milagro_cs_client.RNG,&SEED);
    mbedtls_milagro_cs_create_csprng(&milagro_cs_server.RNG,&SEED);
    milagro_cs_client.date = date;
    milagro_cs_server.date = date;
    /*
     * Allocate memory and generation parameters from client's side
     */
    TEST_ASSERT( mbedtls_milagro_cs_alloc_memory(MBEDTLS_MILAGRO_IS_CLIENT, &milagro_cs_client) == 0 );
    TEST_ASSERT( mbedtls_milagro_cs_alloc_memory(MBEDTLS_MILAGRO_IS_SERVER, &milagro_cs_server) == 0 );
    /*
     * Exchange parameters
     */
    milagro_cs_server.hash_client_id.val = mbedtls_milagro_calloc(milagro_cs_client.hash_client_id.len);
    milagro_cs_server.U.val = mbedtls_milagro_calloc(milagro_cs_client.U.len);
    milagro_cs_server.UT.val = mbedtls_milagro_calloc(milagro_cs_client.UT.len);
    milagro_cs_server.V.val = mbedtls_milagro_calloc(milagro_cs_client.V.len);
    memcpy(milagro_cs_server.hash_client_id.val,milagro_cs_client.hash_client_id.val,milagro_cs_client.hash_client_id.len);
    memcpy(milagro_cs_server.UT.val,milagro_cs_client.UT.val,milagro_cs_client.UT.len);
    memcpy(milagro_cs_server.U.val,milagro_cs_client.U.val,milagro_cs_client.U.len);
    memcpy(milagro_cs_server.V.val,milagro_cs_client.V.val,milagro_cs_client.V.len);
    milagro_cs_server.hash_client_id.len = milagro_cs_client.hash_client_id.len;
    milagro_cs_server.U.len = milagro_cs_client.U.len;
    milagro_cs_server.UT.len = milagro_cs_client.UT.len;
    milagro_cs_server.V.len = milagro_cs_client.V.len;
    milagro_cs_server.timevalue = milagro_cs_server.timevalue;
    
    /*
     * Client's authentication at server'side
     */
    TEST_ASSERT( mbedtls_milagro_cs_authenticate_client(&milagro_cs_server) != 0 );
    
exit:
    mbedtls_free(cs_client_key); mbedtls_free(cs_server_key); mbedtls_free(cs_client_tp);
    mbedtls_milagro_cs_free( &milagro_cs_client );
    mbedtls_milagro_cs_free( &milagro_cs_server );
}
/* END_CASE */


/* BEGIN_CASE */
void milagro_cs_bad( int date, char *client_identity, char *time_permit,
                               char *client_secret )
{
    /*
     * Initializate parameters
     */
    mbedtls_milagro_cs_context milagro_cs_client;
    mbedtls_milagro_cs_context milagro_cs_server;
    mbedtls_milagro_cs_init(&milagro_cs_client);
    
    /*
     * Set external inputs
     */
    size_t len1, len2;
    unsigned char *cs_client_key = unhexify_alloc(client_secret,&len1);
    unsigned char *cs_client_tp = unhexify_alloc(time_permit,&len2);

    mbedtls_milagro_cs_set_secret(&milagro_cs_client, (char*)cs_client_key, 2*PFS+1);
    mbedtls_milagro_cs_set_client_identity (&milagro_cs_client, client_identity);
    mbedtls_milagro_cs_set_timepermit(&milagro_cs_client, (char*)cs_client_tp, 2*PFS+1);
    
    /*
     * Setup random generator (fake entropy)
     */
    
    char seed[32] = {0};
    octet SEED = {0,sizeof(seed),seed};
    SEED.len=32;
    for (int i=0;i<32;i++) SEED.val[i]=i+1;
    mbedtls_milagro_cs_create_csprng(&milagro_cs_client.RNG,&SEED);
    milagro_cs_client.date = date;
    /*
     * Allocate memory and generation parameters from client's side
     */
    TEST_ASSERT( mbedtls_milagro_cs_alloc_memory(MBEDTLS_MILAGRO_IS_CLIENT, &milagro_cs_client) != 0 );

exit:
    mbedtls_free(cs_client_key); mbedtls_free(cs_client_tp);
    mbedtls_milagro_cs_free( &milagro_cs_client );
}
/* END_CASE */


